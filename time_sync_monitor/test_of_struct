from struct import *
from array import *

# identifier = 0xDEADFACE
# print(identifier)
# packed = pack('I', identifier)
# print(packed)

# b'\xce\xfa\xad\xde\xff\xb0b@\x83\xcd\xfe\n\x00\x00\x0c\x03\x00'
#bytearr = array('b')

# arr = unpack('8s', b'\x00\x01\x00\x02\x00\x00\x00\x03')
# print(arr)
# bytearr.frombytes(arr[0])
# print(bytearr)

# 'ic6s4sh'

# tup = unpack('=Ib6s4sh', b'\xce\xfa\xad\xde\xff\xb0b@\x83\xcd\xfe\n\x00\x00\x0c\x03\x00', )
# # print(tup)
# #
# # bytearr.frombytes(tup[2])
# # bytearr.tostring()
# # print(bytearr.tostring())
# #
# # print(hex(tup[0]))


#
# # Elements
# IP = ['4s', 4]
# MAC = ['6s', 6]
# IDENTIFIER = ['I', 4]
# OPCODE = ['b', 1]
# ELEMENT_ADDR = ['h', 2]
#



class Message:

    HEADER_FORMAT = '=Ib6s4sh'

    def __init__(self, raw_data):
        self.ip = None
        self.mac = None
        self.opcode = None
        self.payload = self.parse_header(raw_data)

    @staticmethod
    def get(raw_data): # factory pattern
        msg = Message(raw_data)
        if msg.opcode == 1:
            return IAmAliveMsg(raw_data)


    def parse_header(self, raw_data):
        (self.ip, self.mac, self.opcode) = unpack(Message.HEADER_FORMAT, b'\xce\xfa\xad\xde\xff\xb0b@\x83\xcd\xfe\n\x00\x00\x0c\x03\x00')
        return raw_data[11:]

    def pack_header(self):
        return pack(Message.HEADER_FORMAT, self.ip, self.mac, self.opcode)


class IAmAliveMsg(Message):
    def __init__(self, raw_data):
        super.__init__(self, raw_data)
        # parse msg
        #.....self.payload
        self.ip = None


msg = Message.get(data)
# # Message types
# I_AM_ALIVE = [IDENTIFIER, OPCODE, MAC, IP, ELEMENT_ADDR]
#
# idx = 0
# for element in I_AM_ALIVE:
#     tup = unpack_from(element[0], b'\xce\xfa\xad\xde\xff\xb0b@\x83\xcd\xfe\n\x00\x00\x0c\x03\x00', idx)
#     idx += element[1]
#     print(tup[0])
#
#
# ting = b'\n\x00\x00\x0c'
# print(ting.hex())
#
# ting = b'\xb0b@\x83\xcd\xfe'
# print(ting.hex())